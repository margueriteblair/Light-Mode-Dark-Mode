{"ast":null,"code":"const {\n  default: axios\n} = require('axios');\n\nconst baseURL = 'http://localhost:3399';\n\nconst validator = require('validator');\n\nmodule.exports = {\n  loginReq: form => {\n    const reqBody = {},\n          fieldErrors = {};\n\n    for (const input of form) {\n      if (input.name === \"credential\" && (input.value.length < 3 || input.value.length > 254)) {\n        fieldErrors[input.name] = \"\\nInvalid length, must be between 3 and 254 characters!\";\n      }\n\n      if (input.name === \"password\" && (input.value.length < 7 || input.value.length > 1000)) {\n        fieldErrors[input.name] = \"\\nInvalid password length, password must be between 7 and 1000 characters\\n\";\n      }\n    }\n\n    if (Object.keys(fieldErrors).length !== 0) {\n      let errorStr = \"\";\n\n      for (const field in fieldErrors) {\n        errorStr += `\\nError in field ${field !== \"credential\" ? field : \"username or email\"} - ${fieldErrors[field]}`;\n      }\n\n      console.log(errorStr);\n      alert(errorStr);\n      return;\n    } else {\n      for (const input of form) {\n        reqBody[input.name] = input.value;\n      }\n    }\n\n    const loginUrl = baseURL + '/user/login';\n    axios.put(loginUrl, reqBody).then(res => {\n      console.log(res);\n    }).catch(err => {\n      if (err) {\n        console.log(err);\n      }\n    });\n  },\n  regReq: form => {\n    const reqBody = {},\n          fieldErrors = {};\n\n    for (const input of form) {\n      const val = input.value;\n\n      if (input.name === \"email\") {\n        if (val.length < 6 || val.length > 254) {\n          fieldErrors.email = \"\\nYou must enter a valid email.\\n\";\n        } else if (!validator.isEmail(val)) {\n          fieldErrors.email = \"\\nYou must enter a valid email.\\n\";\n        }\n      }\n\n      if (input.name === \"username\" && (val.length < 3 || val.length > 21)) {\n        fieldErrors.username = \"\\nUsername length has to be between 3 and 21 valid characters.\\n\";\n      }\n\n      if (input.name === \"password\" && (val.length < 7 || val.length > 1000)) {\n        fieldErrors[input.name] = \"\\nInvalid password length: password should be between 7 & 1000 characters\\n\";\n      }\n\n      if (document.getElementsByName(\"password\").value !== document.getElementsByName(\"password2\").value) {\n        fieldErrors[\"password_match\"] = \"\\nThe two passwords must match\\n\";\n      }\n    }\n\n    console.log(fieldErrors);\n\n    if (Object.keys(fieldErrors).length !== 0) {\n      let errorStr = \"\";\n\n      for (const field in fieldErrors) {\n        errorStr += `\\nError in the ${field !== \"credential\" ? field : \"username or email\"} field: ${fieldErrors[field]}`;\n      }\n\n      console.log(errorStr);\n      alert(errorStr);\n    } else if (Object.keys(fieldErrors).length === 0) {\n      for (const input of form) {\n        if (input.name !== \"password2\") {\n          reqBody[input.name] = input.value;\n        }\n      }\n\n      console.log(reqBody);\n      const registerURL = `${baseURL}/user/register`;\n      axios.post(registerURL, reqBody).then(res => {\n        console.log(res);\n      }).catch(error => {\n        if (error) {\n          console.log(error);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/margueriteblair/Documents/CareerDevs11/javascript/101/2020-09/togglelightmode/src/utils/userRequests.js"],"names":["default","axios","require","baseURL","validator","module","exports","loginReq","form","reqBody","fieldErrors","input","name","value","length","Object","keys","errorStr","field","console","log","alert","loginUrl","put","then","res","catch","err","regReq","val","email","isEmail","username","document","getElementsByName","registerURL","post","error"],"mappings":"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","sourcesContent":["const {default: axios} =  require('axios')\nconst baseURL = 'http://localhost:3399'\nconst validator = require('validator')\n\nmodule.exports = {\n    loginReq: (form) => {\n        const reqBody = {}, fieldErrors = {};\n        for (const input of form) {\n            if (input.name === \"credential\" && (input.value.length < 3 || input.value.length > 254)) {\n                fieldErrors[input.name] = \"\\nInvalid length, must be between 3 and 254 characters!\"\n            }\n            if (input.name === \"password\" && (input.value.length < 7 || input.value.length > 1000)) {\n                fieldErrors[input.name] = \"\\nInvalid password length, password must be between 7 and 1000 characters\\n\"\n            }\n        }\n\n        if (Object.keys(fieldErrors).length !== 0) {\n            let errorStr = \"\";\n            for (const field in fieldErrors) {\n                errorStr += `\\nError in field ${field !== \"credential\" ? field : \"username or email\"} - ${fieldErrors[field]}`\n            }\n            console.log(errorStr)\n            alert(errorStr)\n            return\n        } else {\n            for (const input of form) {\n                reqBody[input.name] = input.value\n            }\n        }\n\n        const loginUrl = baseURL + '/user/login'\n\n        axios.put(loginUrl, reqBody)\n        .then(res => {\n            console.log(res)\n        })\n        .catch(err => {\n            if (err) {\n                console.log(err)\n            }\n        })\n    },\n\n    regReq: (form) => {\n        const reqBody = {}, fieldErrors = {}\n        for (const input of form) {\n            const val = input.value\n            if (input.name === \"email\") {\n                if (val.length < 6 || val.length > 254) {\n                    fieldErrors.email = \"\\nYou must enter a valid email.\\n\"\n\n                } else if (!validator.isEmail(val)) {\n                    fieldErrors.email = \"\\nYou must enter a valid email.\\n\"\n                }\n            }\n            if (input.name === \"username\" && (val.length < 3 || val.length > 21)) {\n                    fieldErrors.username = \"\\nUsername length has to be between 3 and 21 valid characters.\\n\"\n            }\n            if (input.name === \"password\" && (val.length < 7 || val.length > 1000)) {\n                    fieldErrors[input.name] = \"\\nInvalid password length: password should be between 7 & 1000 characters\\n\"\n            }\n            if (document.getElementsByName(\"password\").value !== document.getElementsByName(\"password2\").value) {\n                fieldErrors[\"password_match\"] = \"\\nThe two passwords must match\\n\"\n            }\n    \n    \n        }\n        console.log(fieldErrors)\n        if (Object.keys(fieldErrors).length !== 0) {\n            let errorStr = \"\";\n            for (const field in fieldErrors) {\n                errorStr += `\\nError in the ${field !== \"credential\" ? field : \"username or email\"} field: ${fieldErrors[field]}`\n            }\n            console.log(errorStr)\n            alert(errorStr)\n        } else if (Object.keys(fieldErrors).length === 0) {\n            for (const input of form) {\n                if (input.name !== \"password2\") {\n                    reqBody[input.name] = input.value\n                }\n            }\n            console.log(reqBody)\n            const registerURL = `${baseURL}/user/register`\n\n            axios.post(registerURL, reqBody)\n            .then(res => {console.log(res)})\n            .catch(error => {\n                if (error) {\n                    console.log(error)\n                }\n            })\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}