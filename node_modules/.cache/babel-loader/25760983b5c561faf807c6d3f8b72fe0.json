{"ast":null,"code":"var _jsxFileName = \"/Users/margueriteblair/Documents/CareerDevs11/javascript/101/2020-09/togglelightmode/src/hooks/ThemeContext.js\";\nimport React, { useState, useEffect, useContext, createContext } from 'react';\n\nconst {\n  get,\n  set\n} = require('../utils/localStorage');\n\nconst ThemeContext = createContext();\nconst ThemeUpdateContext = createContext();\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\nexport function useThemeUpdate() {\n  return useContext(ThemeUpdateContext);\n}\nexport function ThemeProvider({\n  children\n}) {\n  //provides context to all componenets to the function\n  const [theme, setTheme] = useState(() => {\n    return get('theme', true); //starts us off in lightmode. light= true\n  });\n  useEffect(() => {\n    set('theme', JSON.stringify(theme));\n    console.log('The Theme Changed:', theme);\n    document.getElementById('root').style.backgroundColor = theme ? 'white' : 'black';\n  }, [theme]); //when theme changes use this function\n\n  const themeToggle = () => {\n    setTheme(currentTheme => !currentTheme);\n  };\n\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ThemeUpdateContext.Provider, {\n    value: themeToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, children));\n}","map":{"version":3,"sources":["/Users/margueriteblair/Documents/CareerDevs11/javascript/101/2020-09/togglelightmode/src/hooks/ThemeContext.js"],"names":["React","useState","useEffect","useContext","createContext","get","set","require","ThemeContext","ThemeUpdateContext","useTheme","useThemeUpdate","ThemeProvider","children","theme","setTheme","JSON","stringify","console","log","document","getElementById","style","backgroundColor","themeToggle","currentTheme"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,aAAhD,QAAoE,OAApE;;AAEA,MAAM;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAeC,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAMC,YAAY,GAAGJ,aAAa,EAAlC;AACA,MAAMK,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,OAAO,SAASM,QAAT,GAAoB;AACvB,SAAOP,UAAU,CAACK,YAAD,CAAjB;AACH;AAED,OAAO,SAASG,cAAT,GAA0B;AAC7B,SAAOR,UAAU,CAACM,kBAAD,CAAjB;AACH;AAED,OAAO,SAASG,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AAAE;AAE1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAE,MAAM;AACtC,WAAOI,GAAG,CAAC,OAAD,EAAU,IAAV,CAAV,CADsC,CACZ;AAC7B,GAFiC,CAAlC;AAIAH,EAAAA,SAAS,CAAE,MAAM;AACbI,IAAAA,GAAG,CAAC,OAAD,EAAUU,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAV,CAAH;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,KAAlC;AAEAM,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAAhC,CAAsCC,eAAtC,GAAuDT,KAAK,GAAG,OAAH,GAAa,OAAzE;AACH,GALQ,EAKN,CAACA,KAAD,CALM,CAAT,CANwC,CAW7B;;AAEX,QAAMU,WAAW,GAAG,MAAM;AACtBT,IAAAA,QAAQ,CAACU,YAAY,IAAI,CAACA,YAAlB,CAAR;AACH,GAFD;;AAIA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEU,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,QADL,CADJ,CADJ;AAOH","sourcesContent":["import React, {useState, useEffect, useContext, createContext} from 'react';\n\nconst { get, set } = require('../utils/localStorage');\nconst ThemeContext = createContext();\nconst ThemeUpdateContext = createContext();\n\nexport function useTheme() {\n    return useContext(ThemeContext)\n}\n\nexport function useThemeUpdate() {\n    return useContext(ThemeUpdateContext)\n}\n\nexport function ThemeProvider({ children }) { //provides context to all componenets to the function\n\n    const [theme, setTheme] = useState( () => {\n        return get('theme', true) //starts us off in lightmode. light= true\n    })\n\n    useEffect( () => {\n        set('theme', JSON.stringify(theme))\n        console.log('The Theme Changed:', theme);\n\n        document.getElementById('root').style.backgroundColor= theme ? 'white' : 'black';\n    }, [theme])//when theme changes use this function\n\n    const themeToggle = () => {\n        setTheme(currentTheme => !currentTheme)\n    }\n\n    return (\n        <ThemeContext.Provider value={theme}>\n            <ThemeUpdateContext.Provider value={themeToggle}>\n                {children}\n            </ThemeUpdateContext.Provider>\n        </ThemeContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}